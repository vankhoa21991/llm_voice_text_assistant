import streamlit as st
from dotenv import load_dotenv
load_dotenv()

import os
from VirAsst.RAG import ContentCreator
from VirAsst.llm.llms import model_lists
openai_api_key = os.getenv("OPENAI_API_KEY")

def page_rag():
    # Initialize session state for dynamic inputs
    if 'additional_inputs' not in st.session_state:
        st.session_state.additional_inputs = []

    # Function to add a new input row
    def add_input():
        st.session_state.additional_inputs.append("")

    with st.sidebar:
        st.sidebar.title("How to use")
        st.sidebar.markdown(
        """
        1. Enter the number of web references you want to use. (Max 20).
        2. Enter the keyword you want to generate a blog post for.
        3. Add links manually to the generated blog post.
        4. Click on the "Generate blog post" button.

        """
    )
                
        num_web = st.number_input(
            label="Enter number of web references to use",
            max_value=20,
            min_value=1,
            value=10,
        )

        st.divider()
        st.sidebar.title("About")
        st.sidebar.markdown(
            """
            Content Generator allows you to generate an SEO optimised content from keywords. 
            It uses web references from top ranking articles to generate your blog post. 
            It also allows you to specify a number of web links to use. 
            It only allows a maximum of 10.
            This agent is a work in progress and you can contribute to it on [Github](https://github.com/vankhoa21991/blogGen) 
        with your feedback and suggestions.

        """
    )

        st.divider()

        st.sidebar.title("FAQs")

        st.markdown(
        """
        #### How does it work?
        The Blog Post Generator uses web references from top ranking articles to generate your blog post.

        #### Is the information generated by the agent accurate?
        The agent generates information based on the web references provided. It is recommended to verify the information generated.

        #### How many web references can I use?
        You can use a maximum of 10 web references.

        #### How do I get an OpenAI API key?
        You can get an OpenAI API key by signing up at [OpenAI](https://platform.openai.com/account/api-keys).

        #### How do I contribute to the project?
        You can contribute to the project on [Github](https://github.com/vankhoa21991/blogGen) with your feedback and suggestions.

        """
    )

        st.divider()


    st.header("Let me help you with your documents!!!")
    st.title("Content Generator with RAG")

    # Dropdown for model selection
    selected_model = st.selectbox("Select Model:", model_lists)

    # Selection box for tasks
    selected_task = st.selectbox("Select Task:", tasks)
    
    # Blog post generator form
    with st.form(key="generate_blog_post"):
        keyword = st.text_input(label="Enter a keyword", placeholder="")

        submitted = st.form_submit_button("Generate blog post")

    # Main input
    st.write("#### Add additional links:")
    # Existing dynamic input fields
    for i, input_val in enumerate(st.session_state.additional_inputs):
        st.session_state.additional_inputs[i] = st.text_input(f"Input {i + 1}", value=input_val, key=f"input_{i}")

    # Button to add new input row (outside of the form)
    st.button("+ Add More", on_click=add_input)

    st.button("Remove", on_click=lambda: st.session_state.additional_inputs.pop())

    st.write("#### Add additional pdf files:")
    st.file_uploader("Upload", type=["pdf"])

    if submitted  and not openai_api_key:
            st.info("Please enter your OpenAI API key", icon="‚ÑπÔ∏è")
            
    elif submitted and not keyword:
            st.warning("Please enter a keyword", icon="‚ö†Ô∏è")
            
    elif submitted:
        creator = ContentCreator(num_web=num_web)
        response = creator.create_blog_post(keyword=keyword, additional_links=
            st.session_state.additional_inputs)

        if response is None or not response:
            st.status("Generating ... ")    
        elif isinstance(response, Exception):
                st.warning("An error occured. Please try again!")
                st.error(response, icon="üö®")
        else:
                st.write("### Generated blog post")
                st.write(response)
                st.snow()

# if __name__ == "__main__":
#     page_rag()