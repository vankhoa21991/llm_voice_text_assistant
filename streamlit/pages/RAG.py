import streamlit as st
from dotenv import load_dotenv
load_dotenv()

import os
from VirAsst.vectorDB import VectorDB
from VirAsst.vectorDB import embedding_list
openai_api_key = os.getenv("OPENAI_API_KEY")

def page_rag():
    # Initialize session state for dynamic inputs
    if 'additional_inputs' not in st.session_state:
        st.session_state.additional_inputs = []

    # Function to add a new input row
    def add_input():
        st.session_state.additional_inputs.append("")
        
    with st.sidebar:
        st.sidebar.title("How to use")
        st.sidebar.markdown(
        """
        1. Enter the number of web references you want to use. (Max 20).
        2. Enter the keyword you want to generate a blog post for.
        3. Add links manually to the generated blog post.
        4. Click on the "Generate blog post" button.

        """
    )

        # Dropdown for model selection
        selected_embed = st.sidebar.selectbox("Select Embedding:", embedding_list.keys())
            
        # num_web = st.number_input(
        #     label="Enter number of web references to use",
        #     max_value=20,
        #     min_value=1,
        #     value=10,
        # )

        st.divider()
        st.sidebar.title("About")
        st.sidebar.markdown(
            """
            Content Generator allows you to generate an SEO optimised content from keywords. 
            It uses web references from top ranking articles to generate your blog post. 
            It also allows you to specify a number of web links to use. 
            It only allows a maximum of 10.
            This agent is a work in progress and you can contribute to it on [Github](https://github.com/vankhoa21991/blogGen) 
        with your feedback and suggestions.

        """
    )

        st.divider()

        st.sidebar.title("FAQs")

        st.markdown(
        """
        #### How does it work?
        The Blog Post Generator uses web references from top ranking articles to generate your blog post.

        #### Is the information generated by the agent accurate?
        The agent generates information based on the web references provided. It is recommended to verify the information generated.

        #### How many web references can I use?
        You can use a maximum of 10 web references.

        #### How do I get an OpenAI API key?
        You can get an OpenAI API key by signing up at [OpenAI](https://platform.openai.com/account/api-keys).

        #### How do I contribute to the project?
        You can contribute to the project on [Github](https://github.com/vankhoa21991/blogGen) with your feedback and suggestions.

        """
    )

        st.divider()


    st.header("Let me help you with your documents!!!")
    st.title("Content Generator with RAG")

    # Blog post generator form
    keyword = st.text_input(label="Enter a keyword to search for", key="keyword", placeholder="")

    # Main input
    st.write("#### Add additional links:")

    # Create two columns for the buttons
    col1, col2 = st.columns([1, 1])

    # Add buttons in each column
    with col1:
        st.button("+ Add More", on_click=add_input)

    with col2:
        st.button("Remove", on_click=lambda: st.session_state.additional_inputs.pop())

    # Existing dynamic input fields
    for i, input_val in enumerate(st.session_state.additional_inputs):
        st.session_state.additional_inputs[i] = st.text_input(f"Input {i + 1}", value=input_val, key=f"input_{i}")


    st.write("#### Add additional pdf files:")
    # Create a directory to save the uploaded files (if it doesn't exist)
    os.makedirs("uploaded_files", exist_ok=True)

    # Upload multiple PDF files
    uploaded_files = st.file_uploader("Upload multiple text files", type=["pdf"], accept_multiple_files=True)
    file_paths = []
    if uploaded_files:
        for uploaded_file in uploaded_files:
            # Save each uploaded file to the 'uploaded_files' directory
            file_path = os.path.join("uploaded_files", uploaded_file.name)
            file_path = file_path.replace(" ", "_")
            with open(file_path, "wb") as f:
                f.write(uploaded_file.getbuffer())
            file_paths.append(file_path)
            # Display the saved file path
            st.write(f"File saved at: {file_path}")

    submitted = st.button('‚ú® **Generate vectorDB**', type='primary')
            
    if submitted and not keyword:
        st.warning("Please enter a keyword", icon="‚ö†Ô∏è")
            
    elif submitted:
        creator = VectorDB(num_web=10, embedding_name = selected_embed)
        creator.create_vectorDB(keyword=keyword, 
                    additional_links= st.session_state.additional_inputs,
                    localfiles=file_paths)

        st.success("VectorDB created successfully", icon="üéâ")

    # add text box to retrieve the query
    query = st.text_input("Enter a query to search for", key="query", placeholder="")
    retrieve = st.button('‚ú® **Retrieve**', type='primary')

    if retrieve and not query:
        st.warning("Please enter a query", icon="‚ö†Ô∏è")
    elif retrieve:
        creator = VectorDB(num_web=10, embedding_name = selected_embed)
        creator.load_vectorDB(keyword)
        response = creator.retrieve(query)
        st.write("### Retrieved documents")
        st.write(response)
        st.snow()

        # if response is None or not response:
        #     st.status("Generating ... ")    
        # elif isinstance(response, Exception):
        #     st.warning("An error occured. Please try again!")
        #     st.error(response, icon="üö®")
        # else:
        #     st.write("### Generated blog post")
        #     st.write(response)
        #     st.snow()

if __name__ == "__main__":
    page_rag()